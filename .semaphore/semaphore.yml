version: v1.0
name: Test on PR or create and upload wheels on tag.
agent:
  machine:
    type: s1-prod-ubuntu20-04-amd64-1
global_job_config:
  env_vars:
    - name: LIBRDKAFKA_VERSION
      value: v2.1.0-RC2
  prologue:
    commands:
      - checkout
      - mkdir artifacts
blocks:
  - name: "Wheels: OSX x64"
    run:
      when: "tag =~ '.*'"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos
      env_vars:
        - name: OS_NAME
          value: osx
        - name: ARCH
          value: x64
      jobs:
        - name: Build
          commands:
            - PIP_INSTALL_OPTIONS="--user" tools/wheels/build-wheels.sh "${LIBRDKAFKA_VERSION#v}" wheelhouse
            - tar -czf wheelhouse-macOS-${ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-macOS-${ARCH}.tgz --destination artifacts/wheels-${OS_NAME}-${ARCH}.tgz/
  - name: "Wheels: Linux x64"
    run:
      when: "tag =~ '.*'"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-amd64-3
      env_vars:
        - name: OS_NAME
          value: linux
        - name: ARCH
          value: x64
      jobs:
        - name: Build
          commands:
            - ./tools/wheels/build-wheels.sh "${LIBRDKAFKA_VERSION#v}" wheelhouse
            - tar -czf wheelhouse-linux-${ARCH}.tgz wheelhouse
            - artifact push workflow wheelhouse-linux-${ARCH}.tgz --destination artifacts/wheels-${OS_NAME}-${ARCH}.tgz/
  - name: "Source package verification and Integration tests with Python 3 (Linux x64)"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-amd64-2
      env_vars:
        - name: OS_NAME
          value: linux
        - name: ARCH
          value: x64
      jobs:
        - name: Build
          commands:
            - sem-version python 3.8
            # use a virtualenv
            - python3 -m venv _venv && source _venv/bin/activate
            - chmod u+r+x tools/source-package-verification.sh
            - tools/source-package-verification.sh
  - name: "Source package verification with Python 3 (Linux arm64)"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-arm64-1
      env_vars:
        - name: OS_NAME
          value: linux
        - name: ARCH
          value: arm64
      jobs:
        - name: Build
          commands:
            - sem-version python 3.8
            # use a virtualenv
            - python3 -m venv _venv && source _venv/bin/activate
            - chmod u+r+x tools/source-package-verification.sh
            - tools/source-package-verification.sh
  - name: "Source package verification with Python 3 (OSX x64) +docs"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos
      env_vars:
        - name: OS_NAME
          value: osx
        - name: ARCH
          value: x64
      jobs:
        - name: Build
          commands:
            - sem-version python 3.8
            # use a virtualenv
            - python3 -m venv _venv && source _venv/bin/activate
            - chmod u+r+x tools/source-package-verification.sh
            - tools/source-package-verification.sh
  - name: "Source package verification with Python 3 (OSX arm64) +docs"
    dependencies: []
    task:
      agent:
        machine:
          type: s1-prod-macos-arm64
      env_vars:
        - name: OS_NAME
          value: osx
        - name: ARCH
          value: arm64
      jobs:
        - name: Build
          commands:
            - sem-version python 3.8
            # use a virtualenv
            - python3 -m venv _venv && source _venv/bin/activate
            - chmod u+r+x tools/source-package-verification.sh
            - tools/source-package-verification.sh
  - name: "Packaging"
    run:
      when: "tag =~ '.*'"
    dependencies: 
      - "Wheels: OSX x64"
      - "Wheels: Linux x64"
    task:
      agent:
        machine:
          type: s1-prod-ubuntu20-04-amd64-3
      jobs:
        - name: "Packaging all artifacts"
          commands:
            - artifact pull workflow artifacts
            - cd artifacts
            - ls *.tgz |xargs -n1 tar -xvf
            - tar cvf confluent-kafka-python-wheels-${SEMAPHORE_GIT_TAG_NAME}-${SEMAPHORE_WORKFLOW_ID}.tgz wheelhouse/
            - ls -la
            - sha256sum confluent-kafka-python-wheels-${SEMAPHORE_GIT_TAG_NAME}-${SEMAPHORE_WORKFLOW_ID}.tgz
            - cd ..
            - artifact push project artifacts/confluent-kafka-python-wheels-${SEMAPHORE_GIT_TAG_NAME}-${SEMAPHORE_WORKFLOW_ID}.tgz --destination confluent-kafka-python-wheels-${SEMAPHORE_GIT_TAG_NAME}-${SEMAPHORE_WORKFLOW_ID}.tgz
            - echo Thank you
